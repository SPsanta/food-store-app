import React, { useState } from 'react';
import { ChefHat, ArrowRight } from 'lucide-react';
import { UserPreferences } from '../types';

interface OnboardingScreenProps {
  onComplete: (preferences: UserPreferences) => void;
}

export const OnboardingScreen: React.FC<OnboardingScreenProps> = ({ onComplete }) => {
  const [step, setStep] = useState(0);
  const [selectedCuisines, setSelectedCuisines] = useState<string[]>([]);
  const [frequency, setFrequency] = useState(50);
  const [budget, setBudget] = useState<[number, number]>([500, 2000]);

  const cuisines = [
    { emoji: 'üç£', name: '–Ø–ø–æ–Ω—Å–∫–∞—è', value: 'japanese' },
    { emoji: 'ü•ü', name: '–ö–∏—Ç–∞–π—Å–∫–∞—è', value: 'chinese' },
    { emoji: 'üçï', name: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', value: 'italian' },
    { emoji: 'üåÆ', name: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è', value: 'mexican' },
    { emoji: 'üçî', name: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è', value: 'american' },
    { emoji: 'ü•ò', name: '–ò–Ω–¥–∏–π—Å–∫–∞—è', value: 'indian' },
    { emoji: 'üçñ', name: '–†—É—Å—Å–∫–∞—è', value: 'russian' },
    { emoji: 'ü•ó', name: '–ó–¥–æ—Ä–æ–≤–∞—è', value: 'healthy' },
  ];

  const handleCuisineToggle = (cuisine: string) => {
    setSelectedCuisines(prev =>
      prev.includes(cuisine)
        ? prev.filter(c => c !== cuisine)
        : [...prev, cuisine]
    );
  };

  const handleNext = () => {
    if (step < 2) {
      setStep(step + 1);
    } else {
      onComplete({
        cuisines: selectedCuisines,
        frequency,
        budget,
      });
    }
  };

  const steps = [
    {
      title: '–ö–∞–∫–∏–µ –∫—É—Ö–Ω–∏ –≤—ã –ª—é–±–∏—Ç–µ?',
      subtitle: '–°–¥–µ–ª–∞–π—Ç–µ –í–∞—à –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä',
      content: (
        <div className="grid grid-cols-2 gap-4 mt-8">
          {cuisines.map((cuisine) => (
            <button
              key={cuisine.value}
              onClick={() => handleCuisineToggle(cuisine.value)}
              className={`p-4 rounded-2xl border-2 transition-all duration-300 transform hover:scale-105 ${
                selectedCuisines.includes(cuisine.value)
                  ? 'border-orange-500 bg-orange-100 shadow-lg'
                  : 'border-gray-200 bg-white hover:border-orange-300'
              }`}
            >
              <div className="text-3xl mb-2">{cuisine.emoji}</div>
              <div className="text-sm font-medium text-gray-700">{cuisine.name}</div>
            </button>
          ))}
        </div>
      ),
    },
    {
      title: '–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –µ–¥—É?',
      subtitle: '–ü–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
      content: (
        <div className="mt-8">
          <div className="bg-white rounded-2xl p-6 shadow-lg">
            <input
              type="range"
              min="0"
              max="100"
              value={frequency}
              onChange={(e) => setFrequency(Number(e.target.value))}
              className="w-full h-3 bg-gradient-to-r from-orange-200 to-orange-500 rounded-lg appearance-none cursor-pointer"
              aria-label="–ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤"
            />
            <div className="flex justify-between mt-4 text-sm text-gray-600">
              <span>–†–µ–¥–∫–æ</span>
              <span className="font-semibold text-orange-600">
                {frequency < 33 ? '–†–µ–¥–∫–æ' : frequency < 66 ? '–ß–∞—Å—Ç–æ' : '–û—á–µ–Ω—å —á–∞—Å—Ç–æ'}
              </span>
              <span>–û—á–µ–Ω—å —á–∞—Å—Ç–æ</span>
            </div>
          </div>
        </div>
      ),
    },
    {
      title: '–í–∞—à –±—é–¥–∂–µ—Ç?',
      subtitle: '–ü–æ–∫–∞–∂–µ–º –±–ª—é–¥–∞ –≤ –≤–∞—à–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ',
      content: (
        <div className="mt-8">
          <div className="bg-white rounded-2xl p-6 shadow-lg">
            <div className="mb-6">
              <div className="flex justify-between mb-4">
                <span className="text-lg font-semibold text-orange-600">
                  ‚ÇΩ{budget[0]}
                </span>
                <span className="text-lg font-semibold text-orange-600">
                  ‚ÇΩ{budget[1]}
                </span>
              </div>
              <div className="flex space-x-4">
                <input
                  type="range"
                  min="100"
                  max="5000"
                  value={budget[0]}
                  onChange={(e) => setBudget([Number(e.target.value), budget[1]])}
                  className="flex-1 h-3 bg-gradient-to-r from-orange-200 to-orange-500 rounded-lg appearance-none cursor-pointer"
                  aria-label="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç"
                />
                <input
                  type="range"
                  min="100"
                  max="5000"
                  value={budget[1]}
                  onChange={(e) => setBudget([budget[0], Number(e.target.value)])}
                  className="flex-1 h-3 bg-gradient-to-r from-orange-200 to-orange-500 rounded-lg appearance-none cursor-pointer"
                  aria-label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç"
                />
              </div>
            </div>
            <div className="grid grid-cols-3 gap-4 text-center">
              <div className="p-3 bg-orange-50 rounded-xl">
                <div className="text-sm text-gray-600">–ú–∏–Ω–∏–º—É–º</div>
                <div className="font-bold text-orange-600">‚ÇΩ{budget[0]}</div>
              </div>
              <div className="p-3 bg-orange-100 rounded-xl">
                <div className="text-sm text-gray-600">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</div>
                <div className="font-bold text-orange-600">‚ÇΩ{Math.round((budget[0] + budget[1]) / 2)}</div>
              </div>
              <div className="p-3 bg-orange-50 rounded-xl">
                <div className="text-sm text-gray-600">–ú–∞–∫—Å–∏–º—É–º</div>
                <div className="font-bold text-orange-600">‚ÇΩ{budget[1]}</div>
              </div>
            </div>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-400 via-red-400 to-pink-400 px-6 py-8">
      <div className="max-w-md mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="bg-white/20 backdrop-blur-lg rounded-full w-20 h-20 mx-auto mb-6 flex items-center justify-center">
            <ChefHat size={40} className="text-white" />
          </div>
          <h1 className="text-4xl font-bold text-white mb-2">U-COOK</h1>
          <p className="text-white/80">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥—É—Ä–º–∞–Ω–æ–≤</p>
        </div>

        {/* Progress */}
        <div className="flex mb-8">
          {[0, 1, 2].map((i) => (
            <div
              key={i}
              className={`flex-1 h-2 rounded-full mx-1 transition-all duration-300 ${
                i <= step ? 'bg-white' : 'bg-white/30'
              }`}
            />
          ))}
        </div>

        {/* Content */}
        <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-6 mb-8">
          <h2 className="text-2xl font-bold text-white mb-2">
            {steps[step].title}
          </h2>
          <p className="text-white/80 mb-4">
            {steps[step].subtitle}
          </p>
          {steps[step].content}
        </div>

        {/* Button */}
        <button
          onClick={handleNext}
          disabled={step === 0 && selectedCuisines.length === 0}
          className="w-full bg-white text-orange-500 font-bold py-4 px-6 rounded-2xl flex items-center justify-center space-x-2 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:transform-none shadow-lg"
        >
          <span>{step === 2 ? '–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å!' : '–î–∞–ª–µ–µ'}</span>
          <ArrowRight size={20} />
        </button>
      </div>
    </div>
  );
};