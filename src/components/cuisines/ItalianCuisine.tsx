import React, { useState, useRef } from 'react';
import { ArrowLeft, Star, Clock, Info, ChefHat } from 'lucide-react';
import { ChefPresentationCard } from '../ChefPresentationCard';

interface ItalianCuisineProps {
  onBack: () => void;
}

interface Dish {
  id: string;
  name: string;
  description: string;
  image: string;
  price: number;
  cookTime: string;
  rating: number;
  tags: string[];
  chef: {
    name: string;
    avatar: string;
    speciality: string;
    rating: number;
  };
}

export const ItalianCuisine: React.FC<ItalianCuisineProps> = ({ onBack }) => {
  const [currentDishIndex, setCurrentDishIndex] = useState(0);
  const [swipeDirection, setSwipeDirection] = useState<'left' | 'right' | null>(null);
  const [showChefCard, setShowChefCard] = useState(false);
  const [selectedChef, setSelectedChef] = useState<any>(null);
  const cardRef = useRef<HTMLDivElement>(null);

  const italianDishes: Dish[] = [
    {
      id: 1,
      name: '–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∞—Å—Ç–∞ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º –∏ —Å—ã—Ä–æ–º –ø–µ–∫–æ—Ä–∏–Ω–æ —Ä–æ–º–∞–Ω–æ',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1200,
      cookTime: '20 –º–∏–Ω',
      rating: 4.8,
      tags: ['–ö–ª–∞—Å—Å–∏–∫–∞', '–ü–∞—Å—Ç–∞', '–ë–µ–∫–æ–Ω'],
      chef: {
        name: '–ú–∞—Ä–∫–æ –ê–Ω—Ç–æ–Ω–∏–æ',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.9,
        experience: '15 –ª–µ—Ç'
      }
    },
    {
      id: 2,
      name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
      description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ –±–∞–∑–∏–ª–∏–∫–æ–º',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 900,
      cookTime: '15 –º–∏–Ω',
      rating: 4.7,
      tags: ['–ü–∏—Ü—Ü–∞', '–ö–ª–∞—Å—Å–∏–∫–∞', '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è'],
      chef: {
        name: '–î–∂—É–ª–∏—è –†–æ–º–∞–Ω–æ',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.8,
        experience: '12 –ª–µ—Ç'
      }
    },
    {
      id: 3,
      name: '–†–∏–∑–æ—Ç—Ç–æ —Å –≥—Ä–∏–±–∞–º–∏',
      description: '–ö—Ä–µ–º–æ–≤–æ–µ —Ä–∏–∑–æ—Ç—Ç–æ —Å –ª–µ—Å–Ω—ã–º–∏ –≥—Ä–∏–±–∞–º–∏ –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1100,
      cookTime: '25 –º–∏–Ω',
      rating: 4.6,
      tags: ['–†–∏–∑–æ—Ç—Ç–æ', '–ì—Ä–∏–±—ã', '–ö—Ä–µ–º–æ–≤–æ–µ'],
      chef: {
        name: '–ö–∞—Ä–ª–æ –ë—å—è–Ω–∫–∏',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.7,
        experience: '18 –ª–µ—Ç'
      }
    },
    {
      id: 4,
      name: '–õ–∞–∑–∞–Ω—å—è –ë–æ–ª–æ–Ω—å–µ–∑–µ',
      description: '–°–ª–æ–µ–Ω–∞—è –ª–∞–∑–∞–Ω—å—è —Å –º—è—Å–Ω—ã–º —Å–æ—É—Å–æ–º –∏ –±–µ—à–∞–º–µ–ª—å',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1400,
      cookTime: '45 –º–∏–Ω',
      rating: 4.9,
      tags: ['–õ–∞–∑–∞–Ω—å—è', '–ú—è—Å–æ', '–°–ª–æ–µ–Ω–∞—è'],
      chef: {
        name: '–ê–Ω–Ω–∞ –§–µ—Ä—Ä–∞—Ä–∏',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.8,
        experience: '14 –ª–µ—Ç'
      }
    },
    {
      id: 5,
      name: '–û—Å—Å–æ–±—É–∫–æ',
      description: '–¢—É—à–µ–Ω–∞—è —Ç–µ–ª—è—á—å—è –≥–æ–ª–µ–Ω—å —Å –æ–≤–æ—â–∞–º–∏ –∏ —Ä–∏–∑–æ—Ç—Ç–æ',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1800,
      cookTime: '2 —á–∞—Å–∞',
      rating: 4.7,
      tags: ['–ú—è—Å–æ', '–¢—É—à–µ–Ω–æ–µ', '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ'],
      chef: {
        name: '–õ—É–∫–∞ –†–æ—Å—Å–∏',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.6,
        experience: '16 –ª–µ—Ç'
      }
    },
    {
      id: 6,
      name: '–¢–∏—Ä–∞–º–∏—Å—É',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç —Å –∫–æ—Ñ–µ, –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ –∏ —Å–∞–≤–æ—è—Ä–¥–∏',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 600,
      cookTime: '30 –º–∏–Ω',
      rating: 4.9,
      tags: ['–î–µ—Å–µ—Ä—Ç', '–ö–æ—Ñ–µ', '–ö—Ä–µ–º–æ–≤—ã–π'],
      chef: {
        name: '–°–æ—Ñ–∏—è –ö–æ–Ω—Ç–∏',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.9,
        experience: '13 –ª–µ—Ç'
      }
    },
    {
      id: 7,
      name: '–ü–∞—Å—Ç–∞ –ê–º–∞—Ç—Ä–∏—á–∞–Ω–∞',
      description: '–ü–∞—Å—Ç–∞ —Å –≥—É–∞–Ω—á–∞–ª–µ, —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –ø–µ–∫–æ—Ä–∏–Ω–æ',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1000,
      cookTime: '18 –º–∏–Ω',
      rating: 4.5,
      tags: ['–ü–∞—Å—Ç–∞', '–ì—É–∞–Ω—á–∞–ª–µ', '–û—Å—Ç—Ä–æ–µ'],
      chef: {
        name: '–†–æ–±–µ—Ä—Ç–æ –ú–æ—Ä–µ–Ω–æ',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.7,
        experience: '11 –ª–µ—Ç'
      }
    },
    {
      id: 8,
      name: '–ü–∏—Ü—Ü–∞ –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞',
      description: '–ü–∏—Ü—Ü–∞ —Å –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–æ–π, –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ —Ä–∏–∫–æ—Ç—Ç–æ–π',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1100,
      cookTime: '18 –º–∏–Ω',
      rating: 4.6,
      tags: ['–ü–∏—Ü—Ü–∞', '–°—ã—Ä', '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è'],
      chef: {
        name: '–≠–ª–µ–Ω–∞ –í–∏—Ç–∞–ª–∏',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.8,
        experience: '15 –ª–µ—Ç'
      }
    },
    {
      id: 9,
      name: '–†–∏–∑–æ—Ç—Ç–æ —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏',
      description: '–†–∏–∑–æ—Ç—Ç–æ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏, –∫–∞–ª—å–º–∞—Ä–∞–º–∏ –∏ –º–∏–¥–∏—è–º–∏',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 1500,
      cookTime: '30 –º–∏–Ω',
      rating: 4.8,
      tags: ['–†–∏–∑–æ—Ç—Ç–æ', '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ö—Ä–µ–º–æ–≤–æ–µ'],
      chef: {
        name: '–î–∂–∞–Ω–∫–∞—Ä–ª–æ –ú–∞—Ä–∏–Ω–æ',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.9,
        experience: '17 –ª–µ—Ç'
      }
    },
    {
      id: 10,
      name: '–ü–∞—Å—Ç–∞ —Å —Ç—Ä—é—Ñ–µ–ª–µ–º',
      description: '–ü–∞—Å—Ç–∞ —Å —á–µ—Ä–Ω—ã–º —Ç—Ä—é—Ñ–µ–ª–µ–º, –º–∞—Å–ª–æ–º –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º',
      image: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      price: 2200,
      cookTime: '15 –º–∏–Ω',
      rating: 4.9,
      tags: ['–ü–∞—Å—Ç–∞', '–¢—Ä—é—Ñ–µ–ª—å', '–ü—Ä–µ–º–∏—É–º'],
      chef: {
        name: '–§–µ–¥–µ—Ä–∏–∫–æ –ù–µ—Ä–æ',
        avatar: '', // –£–±—Ä–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rating: 4.9,
        experience: '20 –ª–µ—Ç'
      }
    }
  ];

  const handleSwipe = (direction: 'left' | 'right') => {
    setSwipeDirection(direction);
    
    setTimeout(() => {
      setSwipeDirection(null);
      if (direction === 'right') {
        // –õ–∞–π–∫ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª—é–¥—É
        setCurrentDishIndex(prev => Math.min(prev + 1, italianDishes.length - 1));
      } else {
        // –î–∏–∑–ª–∞–π–∫ - —Ç–æ–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        setCurrentDishIndex(prev => Math.min(prev + 1, italianDishes.length - 1));
      }
    }, 300);
  };

  const handleShowDetails = () => {
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±–ª—é–¥–∞
    console.log('–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏:', italianDishes[currentDishIndex]);
  };

  const handleShowChef = (chef: any) => {
    setSelectedChef({
      ...chef,
      experience: '12+ –ª–µ—Ç',
      location: '–†–∏–º, –ò—Ç–∞–ª–∏—è',
      bio: '–ú–∞—Å—Ç–µ—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–∞—Å—Ç–µ, –ø–∏—Ü—Ü–µ –∏ —Ä–∏–∑–æ—Ç—Ç–æ. –†–∞–±–æ—Ç–∞–ª –≤ –ª—É—á—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –ò—Ç–∞–ª–∏–∏ –∏ –ø–æ–ª—É—á–∏–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Å–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã.',
      awards: ['–õ—É—á—à–∏–π —à–µ—Ñ –ò—Ç–∞–ª–∏–∏ 2023', '–ó–æ–ª–æ—Ç–∞—è –≤–∏–ª–∫–∞ 2022', '–ú–∞—Å—Ç–µ—Ä –ø–∞—Å—Ç—ã 2021'],
      dishes: ['–ü–∞—Å—Ç–∞', '–ü–∏—Ü—Ü–∞', '–†–∏–∑–æ—Ç—Ç–æ', '–õ–∞–∑–∞–Ω—å—è', '–û—Å—Å–æ–±—É–∫–æ', '–¢–∏—Ä–∞–º–∏—Å—É']
    });
    setShowChefCard(true);
  };

  const currentDish = italianDishes[currentDishIndex];

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-100 via-red-50 to-white">
      {/* Header */}
      <header className="flex items-center p-4 bg-white/80 backdrop-blur-lg">
        <button 
          onClick={onBack}
          className="p-2 rounded-full bg-green-100 hover:bg-green-200 transition-colors mr-4"
          aria-label="–ù–∞–∑–∞–¥"
        >
          <ArrowLeft size={24} className="text-green-600" />
        </button>
        <h1 className="text-2xl font-bold bg-gradient-to-r from-green-500 to-red-500 bg-clip-text text-transparent">
          üçï –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è
        </h1>
      </header>

      {/* Dish Selection Section */}
      <div className="p-4">
        <div className="text-center mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ</h2>
          <p className="text-gray-600">–°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ –¥–ª—è –ª–∞–π–∫–∞, –≤–ª–µ–≤–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞</p>
        </div>

        {/* Dish Card */}
        <div className="relative w-full h-96 bg-white rounded-3xl shadow-xl overflow-hidden transition-all duration-300 transform cursor-grab active:cursor-grabbing"
          ref={cardRef}
          style={{ 
            transform: swipeDirection === 'left' 
              ? 'translateX(-100%) rotate(-10deg)' 
              : swipeDirection === 'right'
              ? 'translateX(100%) rotate(10deg)'
              : 'translateX(0) rotate(0)'
          }}
          onTouchStart={(e) => {
            const touchStartX = e.touches[0].clientX;
            const touchStartY = e.touches[0].clientY;
            
            const handleTouchEnd = (e: TouchEvent) => {
              const touchEndX = e.changedTouches[0].clientX;
              const touchEndY = e.changedTouches[0].clientY;
              const deltaX = touchEndX - touchStartX;
              const deltaY = touchEndY - touchStartY;

              if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 100) {
                if (deltaX > 0) {
                  handleSwipe('right');
                } else {
                  handleSwipe('left');
                }
              }
              
              document.removeEventListener('touchend', handleTouchEnd);
            };
            
            document.addEventListener('touchend', handleTouchEnd);
          }}
        >
          {/* Background Image */}
          <div 
            className="absolute inset-0 bg-cover bg-center"
            style={{ backgroundImage: `url(${currentDish.image})` }}
          >
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
          </div>

          {/* Content Overlay */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent">
            {/* Top Info */}
            <div className="absolute top-4 left-4 right-4 flex justify-between items-start">
              <div className="bg-white/90 backdrop-blur-sm rounded-full px-3 py-1 flex items-center space-x-1">
                <Clock size={14} className="text-orange-600" />
                <span className="text-sm font-medium text-gray-800">{currentDish.cookTime}</span>
              </div>
              <div className="bg-white/90 backdrop-blur-sm rounded-full px-3 py-1 flex items-center space-x-1">
                <Star size={14} className="text-yellow-500 fill-current" />
                <span className="text-sm font-bold text-gray-800">{currentDish.rating}</span>
              </div>
            </div>

            {/* Bottom Info */}
            <div className="absolute bottom-0 left-4 right-4 pb-4">
              <div className="mb-4">
                <h2 className="text-2xl font-bold text-white mb-2">{currentDish.name}</h2>
                <p className="text-white/80 text-sm mb-3">{currentDish.description}</p>
                
                {/* Tags */}
                <div className="flex flex-wrap gap-2 mb-4">
                  {currentDish.tags.map((tag) => (
                    <span
                      key={tag}
                      className="bg-orange-500/80 text-white text-xs px-2 py-1 rounded-full"
                    >
                      #{tag}
                    </span>
                  ))}
                </div>

                {/* Chef Info */}
                <button
                  onClick={() => handleShowChef(currentDish.chef)}
                  className="flex items-center space-x-3 bg-white/10 backdrop-blur-sm rounded-2xl p-3 mb-4 hover:bg-white/20 transition-colors w-full"
                >
                  <img
                    src={currentDish.chef.avatar}
                    alt={currentDish.chef.name}
                    className="w-10 h-10 rounded-full object-cover"
                  />
                  <div className="flex-1 text-left">
                    <div className="font-semibold text-white">{currentDish.chef.name}</div>
                    <div className="text-white/70 text-sm">{currentDish.chef.speciality}</div>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Star size={14} className="text-yellow-400 fill-current" />
                    <span className="text-white font-medium">{currentDish.chef.rating}</span>
                  </div>
                </button>

                {/* Price and Details */}
                <div className="flex items-center justify-between">
                  <div className="text-3xl font-bold text-white">
                    ‚ÇΩ{currentDish.price}
                  </div>
                  
                  <button
                    onClick={handleShowDetails}
                    className="bg-white/20 backdrop-blur-sm rounded-full p-2 hover:bg-white/30 transition-colors"
                    aria-label="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –±–ª—é–¥–µ"
                  >
                    <Info size={20} className="text-white" />
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Swipe Animation Overlay */}
          {swipeDirection && (
            <div className={`absolute inset-0 flex items-center justify-center ${
              swipeDirection === 'right' ? 'bg-green-500/20' : 'bg-red-500/20'
            }`}>
              <div className={`text-6xl ${
                swipeDirection === 'right' ? 'text-green-500' : 'text-red-500'
              }`}>
                {swipeDirection === 'right' ? '‚ù§Ô∏è' : '‚úï'}
              </div>
            </div>
          )}
        </div>

        {/* Progress Indicator */}
        <div className="flex justify-center mt-6 space-x-2">
          {italianDishes.map((_, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full ${
                index === currentDishIndex ? 'bg-orange-500' : 'bg-gray-300'
              }`}
            />
          ))}
        </div>

                 {/* Navigation Buttons */}
         <div className="flex justify-center mt-6 space-x-4">
           <button
             onClick={() => handleSwipe('left')}
             className="bg-red-500 text-white p-4 rounded-full shadow-lg hover:bg-red-600 transition-colors"
             aria-label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª—é–¥–æ"
           >
             ‚úï
           </button>
           <button
             onClick={() => handleSwipe('right')}
             className="bg-green-500 text-white p-4 rounded-full shadow-lg hover:bg-green-600 transition-colors"
             aria-label="–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ"
           >
             ‚ù§Ô∏è
           </button>
         </div>
      </div>

      {/* Chef Presentation Card */}
      {showChefCard && selectedChef && (
        <ChefPresentationCard
          chef={selectedChef}
          onClose={() => {
            setShowChefCard(false);
            setSelectedChef(null);
          }}
        />
      )}
    </div>
  );
}; 